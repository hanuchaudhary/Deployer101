// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[] // One-to-many: User can have multiple projects
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) // Composite key for OAuth provider uniqueness
}

model Project {
  id            String       @id @default(uuid())
  name          String
  githubRepoUrl String
  subDomain     String       @unique
  customDomain  String?      @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  deployments   Deployment[]

  @@index([subDomain])
}

enum DEPLOYMENT_STATUS {
  IDLE // Initial state
  READY // Ready to deploy
  IN_PROGRESS // Deployment in progress
  SUCCESS // Deployment successful
  FAILED // Deployment failed
  CANCELLED // Deployment cancelled
  QUEUED // Deployment queued
}

model Deployment {
  id        String            @id @default(uuid())
  projectId String
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status    DEPLOYMENT_STATUS @default(IDLE)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([status])
}
